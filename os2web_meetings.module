<?php

/**
 * @file
 * Primary module hooks for os2web_meetings module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\os2web_meetings\Entity\BulletPoint;
use Drupal\os2web_meetings\Entity\Meeting;
use Drupal\os2web_meetings\Form\SettingsForm;
use Drupal\views\ViewExecutable;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function os2web_meetings_node_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'os2web_meetings_meeting') {
    // Getting related BPs.
    $meeting = new Meeting($entity);
    $bps = $meeting->getBulletPoints();

    // Deleting related BPs.
    if (!empty($bps)) {
      foreach ($bps as $bp) {
        $bp->delete();
      }
    }
  }
  elseif ($entity->bundle() == 'os2web_meetings_bp') {
    // Deleting related memos.
    $bulletPoint = new BulletPoint($entity);

    // Getting related BPAa.
    $bpas = $bulletPoint->getBulletPointAttachments();

    // Deleting related BPAa.
    if (!empty($bpas)) {
      foreach ($bpas as $bpa) {
        $bpa->delete();
      }
    }
  }
  elseif ($entity->bundle() == 'os2web_meetings_bp') {

  }
}

/**
 * Implements hook_preprocess_paragraph.
 *
 * Adding meeting search form into paragraph.
 */
function os2web_meetings_preprocess_paragraph__os2web_meetings_search(&$variables) {
  $variables['content'] = views_embed_view('os2web_meetings_search', 'os2web_meetings_embed_search_simple');
}

/**
 * Implements HOOK_views_pre_view().
 */
function os2web_meetings_views_pre_view(ViewExecutable $view) {
  if ($view->id() !== 'os2web_meetings_search' || $view->current_display !== 'os2web_meetings_embed_search_simple') {
    return;
  }

  // Fetching filter info.
  $filters = $view->display_handler->getOption('filters');
  $groupInfo = $filters['field_os2web_m_start_date_value']['group_info'];

  // Creating new filter array.
  $yearNow = date("Y");

  $options = [];
  $options[] = strval($yearNow - 2);
  $options[] = strval($yearNow - 1);
  $options[] = strval($yearNow);
  $options[] = strval($yearNow + 1);
  $options[] = strval($yearNow + 2);

  $groupInfo['group_items'] = [];
  for ($i = 0; $i < count($options); $i++) {
    $year = $options[$i];
    $groupInfo['group_items'][$year] = [
      'title' => $year,
      'operator' => 'between',
      'value' => [
        'type' => 'date',
        'value' => '',
        'min' => $year . '-01-01 00:00:00',
        'max' => $year . '-12-31 23:59:59',
      ],
    ];
  }

  // Overriding filters.
  $filters['field_os2web_m_start_date_value']['group_info'] = $groupInfo;

  $view->display_handler->overrideOption('filters', $filters);
}

/**
 * Implements hook_preprocess_node().
 */
function os2web_meetings_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'os2web_meetings_meeting') {
    /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
    if ($start_date = $variables['node']->field_os2web_m_start_date->date) {
      $month_value = $start_date->format('m');
      $variables['attributes']['class'][] = "month--$month_value";
    }
  }
  elseif ($variables['node']->getType() == 'os2web_meetings_bp' && $variables['view_mode'] == 'teaser') {
    $settingFormConfig = \Drupal::config(SettingsForm::$configName);
    $resumeTitle = $settingFormConfig->get('resume_bpa_title');
    $decisionTitle = $settingFormConfig->get('decision_bpa_title');

    /** @var Drupal\Core\Field\EntityReferenceFieldItemList $items */
    $count = 0;
    if (isset($variables['content']['field_os2web_m_bp_bpas']['#items'])) {
      $items = $variables['content']['field_os2web_m_bp_bpas']['#items'];
      $count = isset($items) ? $items->count() : 0;
    }

    $normalBpa = [];
    for ($i = 0; $i < $count; $i++) {
      // Saving BPA render and removing it from a list.
      $bpa_render = $variables['content']['field_os2web_m_bp_bpas'][$i];
      unset($variables['content']['field_os2web_m_bp_bpas'][$i]);

      /** @var \Drupal\node\NodeInterface $bpa */
      $bpa = $bpa_render['#node'];

      // If that a special BPA (Resume or Desicison) add it to special meta
      // field, otherwise save it as normal BPA.
      if (!empty($resumeTitle) && strcasecmp($bpa->getTitle(), $resumeTitle) === 0) {
        $variables['content']['#resume'] = $bpa_render;
      }
      elseif (!empty($decisionTitle) && strcasecmp($bpa->getTitle(), $decisionTitle) === 0) {
        $variables['content']['#decision'] = $bpa_render;
      }
      else {
        $normalBpa[] = $bpa_render;
      }
    }

    // Add normal BPA back to the render array.
    $variables['content']['field_os2web_m_bp_bpas'] = array_merge($variables['content']['field_os2web_m_bp_bpas'], $normalBpa);
  }
  elseif ($variables['node']->getType() == 'os2web_meetings_bpa' && $variables['view_mode'] == 'teaser') {
    $settingFormConfig = \Drupal::config(SettingsForm::$configName);
    $resumeTitle = $settingFormConfig->get('resume_bpa_title');
    $decisionTitle = $settingFormConfig->get('decision_bpa_title');

    $bpa = $variables['node'];
    // Adding class based on the BPA title.
    if (!empty($resumeTitle) && strcasecmp($bpa->getTitle(), $resumeTitle) === 0) {
      $variables['attributes']['class'][] = 'os2wm-bpa-resume';
    }
    elseif (!empty($decisionTitle) && strcasecmp($bpa->getTitle(), $decisionTitle) === 0) {
      $variables['attributes']['class'][] = 'os2wm-bpa-decision';
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function os2web_meetings_preprocess_field__node__field_os2web_m_bp_enclosures(&$variables) {
  $settingFormConfig = \Drupal::config(SettingsForm::$configName);
  $limit = $settingFormConfig->get('enclosures_max_title_length');

  foreach ($variables['items'] as $key => $item) {
    $description = $variables['items'][$key]['content']['#description'];
    if (strlen($description) > $limit) {
      $description = substr($description, 0, $limit) . '...';
    }

    $variables['items'][$key]['content']['#description'] = $description;
  }
}

/**
 * Update entity from yml.
 *
 * Some config like form display needs to be updated via config manager.
 *
 * @param string $ymlFileName
 *   Yml file name.
 * @param string $entityType
 *   The entity type for this storage.
 * @param mixed $id
 *   The ID of the entity to load.
 * @param array $setComponents
 *   Array of components you want to add.
 *   - The key will be what we are setting.
 *   - The value is the key that will be used from the new config file
 *     (Can have in string for array).
 */
function os2web_meetings_update_entity_from_yml($module_name, $ymlFileName, $entityType, $id, array $setComponents) {
  $yml = Yaml::parse(file_get_contents(drupal_get_path('module', $module_name) . '/config/install/' . $ymlFileName . '.yml'));

  $entity = \Drupal::entityTypeManager()
    ->getStorage($entityType)
    ->load($id);
  foreach ($setComponents as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $entity->setComponent($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      if (empty($value)) {
        \Drupal::service('messenger')->addWarning('Component ' . $key . ' has empty configuration');
        continue;
      }
      $entity->setComponent($key, $value);
    }
  }

  $entity->save();
}
