<?php

namespace Drupal\os2web_meetings\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Provides OS2Web Meeting Search Related meeting link block.
 * @Block(
 *   id = "os2web_meetings_related_meeting",
 *   admin_label = @Translation("OS2Web Meeting Related meeting link"),
 * )
 */
class RelatedMeetingLink extends BlockBase implements BlockPluginInterface {

  /**
   * {@inheritdoc}
   */
  public function build() {
    /** @var NodeInterface $meetingNode */
    $meetingNode = \Drupal::routeMatch()->getParameter('node');

    // Checking we have a node.
    if (!$meetingNode instanceof NodeInterface) {
      return NULL;
    }

    // Check block options.
    $relatedMeetingType = $this->configuration['related_meeting_type'];

    $meetingCommittee = $meetingNode->get('field_os2web_m_committee')->first()->getValue()['target_id'];
    $meetingDate = $meetingNode->get('field_os2web_m_start_date')->first()->getValue()['value'];

    // Get previous/next meeting.
    $query = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('type', 'os2web_meetings_meeting')
      ->condition('field_os2web_m_committee', $meetingCommittee)
      ->range(0,1);

    if ($relatedMeetingType == 'next') {
      $query->condition('field_os2web_m_start_date', $meetingDate, '>');
      $query->sort('field_os2web_m_start_date', 'ASC');
    }
    else {
      $query->condition('field_os2web_m_start_date', $meetingDate, '<');
      $query->sort('field_os2web_m_start_date', 'DESC');
    }

    $nids = $query->execute();
    if (!empty($nids)) {
      $relatedMeetingNid = reset($nids);
      $relatedMeeting = Node::load($relatedMeetingNid);
      $markup = $relatedMeeting->toLink()->toString();

      return [
        '#type' => 'markup',
        '#markup' => $markup,
      ];
    }

    return [];
  }

  /**
   * {@inheritdoc}
   */
  public function blockForm($form, FormStateInterface $form_state) {
    $form['related_meeting_type'] = [
      '#type' => 'radios',
      '#title' => $this->t('Related meeting type'),
      '#options' => [
        'next' => $this->t('Next meeting'),
        'previous' => $this->t('Previous meeting')
      ],
      '#default_value' => empty($this->configuration['related_meeting_type']) ? 'next' : $this->configuration['related_meeting_type'],
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
    $this->configuration['related_meeting_type'] = $form_state->getValue('related_meeting_type');
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheTags() {
    $tags = parent::getCacheTags();
    $tags[] = 'node_list:os2web_meetings_meeting';
    return $tags;
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheContexts() {
    $context = parent::getCacheContexts(); // TODO: Change the autogenerated stub
    $context[] = 'url.path';
    $context[] = 'url.query_args';
    return $context;
  }

}
